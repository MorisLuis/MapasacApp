import React, { JSX, useCallback, useContext, useEffect, useState } from 'react';
import { SafeAreaView, ScrollView, View } from 'react-native';
import { RouteProp, useNavigation } from '@react-navigation/native';

import { useTheme } from '../../context/ThemeContext';
import { SellsDataScreenTheme } from '../../theme/Screens/Sells/SellsDataScreenTheme';
import { AuthContext } from '../../context/auth/AuthContext';
import CustomText from '../../components/UI/CustumText';
import ImageContainerCustum from '../../components/UI/ImageContainerCustum';
import FooterScreen from '../../components/Navigation/FooterScreen';
import { EnlacemobInterface, SellsRestaurantNavigationProp } from '../../interface';
import { SellsRestaurantBagContext } from '../../context/SellsRestaurants/SellsRestaurantsBagContext';
import { SellsRestaurantsNavigationStackParamList } from '../../navigator/SellsRestaurantsNavigation';
import ClassInterface from '../../interface/class';
import CardButtonSecondary from '../../components/Cards/CardButtonSecondary';


type ProductDetailsSellsRestaurantsScreenRouteProp = RouteProp<SellsRestaurantsNavigationStackParamList, '[SellsRestaurants] - SellsRestaurantsDetailsScreen'>;

interface ProductDetailsSellsRestaurantsInterface {
    route: ProductDetailsSellsRestaurantsScreenRouteProp;
}

type ExtraProductData = {
    image: string;
    descripcio: string;
    totalClasses: number;
    cvefamilia: number;
    classValue?: ClassInterface;
};


const DEFAULT_VALUE = 0;
const MINIMUM_CLASSES = 1;

export const ProductDetailsSellsRestaurants = ({
    route
}: ProductDetailsSellsRestaurantsInterface): React.ReactElement => {

    const {
        price,
        typeClass,
        units,
        descripcio,
        image,
        idinvearts,
        totalClasses,
        cvefamilia
        //capa,
        //comments,
        //pieces,
    } = route.params ?? {};


    const [extraData, setExtraData] = useState<ExtraProductData>({
        image: '',
        descripcio: '',
        totalClasses: 0,
        cvefamilia: 0,
        classValue: {
            clase: "",
            rcapa: "",
            ridinvearts: 0,
            ridinveclas: 0,
            rproducto: ''
        }
    });

    const { user } = useContext(AuthContext);
    const { addProductToBagSellsRestaurants, methods: { watch, getValues, setValue } } = useContext(SellsRestaurantBagContext);
    const watchedValues = watch();

    const { typeTheme, theme } = useTheme();
    const { goBack, navigate } = useNavigation<SellsRestaurantNavigationProp>();

    const formCompleted = watch('price') && watch('pieces');
    const buttonDisabled = !formCompleted;

    const onSubmit = (): void => {
        const { pieces, price, capa, comments } = getValues();

        const parsedPieces = parseFloat(pieces ?? '');
        const parsedidinvearts = Number(idinvearts)
        const userId = user?.idusrmob;

        const bagProduct: EnlacemobInterface = {
            cantidad: isNaN(parsedPieces) ? DEFAULT_VALUE : parsedPieces,
            precio: price ?? DEFAULT_VALUE,
            idinvearts: parsedidinvearts ?? DEFAULT_VALUE,
            unidad: units ?? DEFAULT_VALUE,
            capa: capa ?? '',
            idusrmob: userId,
            comentario: comments
        };

        goBack();
        addProductToBagSellsRestaurants(bagProduct);
    };

    const selectAmount = (): void => {
        navigate('[SellsRestaurants] - PiecesScreen', { from: "pieces", valueDefault: getValues('pieces') ?? '', unit: 'PZA' })
    };

    const handleNavigateToClass = (): void => {
        if (totalClasses && totalClasses <= MINIMUM_CLASSES) return;
        if (!cvefamilia) return;
        navigate('[SellsRestaurants] - ClassScreen',
            {
                cvefamilia: cvefamilia,
                totalClasses: idinvearts,
                image: image,
                descripcio: descripcio ?? ''
            }
        );
    };;


    const handleGetProduct = useCallback(() => {

        setValue('idinvearts', idinvearts);
        setValue('price', price);
        setValue('typeClass', typeClass);

    }, []);


    const renderHeader = (): JSX.Element => (
        <>
            <View style={SellsDataScreenTheme(theme, typeTheme).header}>
                <CustomText style={SellsDataScreenTheme(theme, typeTheme).title}>
                    {extraData.descripcio.trim()}
                </CustomText>
            </View>

            <ImageContainerCustum
                imageValue={extraData.image}
                size="small"
            />

        </>
    );

    useEffect(() => {
        console.log({ typeClass, descripcio })
        setExtraData(prev => ({
            image: image !== undefined ? image : prev.image,
            descripcio: descripcio !== undefined ? descripcio : prev.descripcio,
            totalClasses: totalClasses !== undefined ? totalClasses : prev.totalClasses,
            cvefamilia: cvefamilia !== undefined ? cvefamilia : prev.cvefamilia,
        }));

    }, [image, descripcio, totalClasses, cvefamilia, typeClass.value, price]);

    useEffect(() => {
        handleGetProduct()
    }, [handleGetProduct])

    console.log({ watchedValues })


    return (
        <SafeAreaView style={{ backgroundColor: theme.background_color }} >
            <View style={SellsDataScreenTheme(theme, typeTheme).SellsDataScreen}>
                <ScrollView
                    contentContainerStyle={SellsDataScreenTheme(theme, typeTheme).SellsDataScreen_content}
                    showsVerticalScrollIndicator={false}
                >
                    {renderHeader()}
                    <CardButtonSecondary
                        onPress={handleNavigateToClass}
                        value={watchedValues?.typeClass?.value || ''}
                        label='Clase:'
                        emptyValue='Seleccionar la clase'
                        color='blue'
                        icon='resize-outline'
                    />

                    <CardButtonSecondary
                        label='Precio:'
                        value={watchedValues?.price || ''}
                        emptyValue='Seleccionar precio'
                        color='purple'
                        icon="pricetags"
                        isPrice={true}
                    />

                    <CardButtonSecondary
                        onPress={selectAmount}
                        value={watchedValues?.pieces || ''}
                        label='Cantidad:'
                        emptyValue='Seleccionar cantidad'
                        color='green'
                        icon="bag-handle"
                    />

                    <CardButtonSecondary
                        onPress={() => navigate('[SellsRestaurants] - CommentInProduct')}
                        label='Comentarios:'
                        value={watchedValues?.comments || ''}
                        emptyValue='Escribir comentario'
                        color='red'
                        icon="chatbox"
                    />
                </ScrollView>

                <FooterScreen
                    buttonTitle="Publicar"
                    buttonOnPress={onSubmit}
                    buttonDisabled={buttonDisabled}
                />
            </View>
        </SafeAreaView>
    );
};